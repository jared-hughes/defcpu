use crate::{
    errors::{RResult, Rerr},
    memory::Memory,
    parse_elf::{LoadSegment, PermissionFlags, SimpleElfFile},
};
use std::ffi::CString;

const PAGE_SIZE: u64 = 0x1000;
const FILENAME: &[u8] = "/tmp/asm\0".as_bytes();
/// Linux: `randomize_stack_top(STACK_TOP)` gives `STACK_TOP - random_variable`,
///   where `random_variable` is a multiple of PAGE_SIZE up to 0x7ff000,
///   and `STACK_TOP` is defined to be `TASK_SIZE_LOW`, which is (1 << 47) - PAGE_SIZE
///   as defined in `arch/x86/include/asm/page_64_types.h`.
/// `setup_arg_pages` calls `arch_align_stack` (from `arch/x86/kernel/process.c`),
///   which subtracts a random multiple of 0x10 below 8192 = 0x2000.
/// `setup_arg_pages` then calls `PAGE_ALIGN` which rounds up to the next multiple of PAGE_SIZE.
/// But then it does a fakeout: the resultant `stack_top` isn't directly used:
///   stack_shift = vma->vm_end - stack_top;
///   bprm->p -= stack_shift;
///   mm->arg_start = bprm->p;
/// What I don't get is why it may be as low as 00007FFCxxxxxxxx
const STACK_TOP: u64 = (1 << 47) - PAGE_SIZE;

/// Linux: `_STK_LIM` is the default stack limit, 8MB = `0x800000`, defined in `include/uapi/linux/resource.h`.
/// Linux: `bprm->rlim_stack.rlim_cur` is the current stack limit.
const STACK_LIMIT: u64 = 0x800000;

struct MemWithStackPtrDown<'a> {
    mem: &'a mut Memory,
    p: u64,
}
impl<'a> MemWithStackPtrDown<'a> {
    /// Write strings from kernel as null-terminated c strings. Returns addresses.
    /// The memory is growing down, but the strings are still written
    /// forwards (so the last string is at the highest address).
    fn write_strs(&mut self, strs: &[String]) -> RResult<Vec<u64>> {
        let mut out: Vec<u64> = vec![0; strs.len()];
        for i in (0..strs.len()).rev() {
            let str = strs[i].as_bytes();
            let cstr = CString::new(str).map_err(|_| Rerr::NulError)?;
            let addr = self.write_bytes(cstr.to_bytes_with_nul())?;
            out[i] = addr;
        }
        Ok(out)
    }

    /// Write bytes from kernel. Returns address.
    fn write_bytes(&mut self, bytes: &[u8]) -> RResult<u64> {
        self.p -= bytes.len() as u64;
        self.mem.write_bytes(self.p, bytes)?;
        Ok(self.p)
    }
}

struct MemWithStackPtrUp<'a> {
    mem: &'a mut Memory,
    p: u64,
}
impl<'a> MemWithStackPtrUp<'a> {
    fn write_u64(&mut self, val: u64) -> RResult<()> {
        self.mem.write_u64(self.p, val)?;
        self.p += 8;
        Ok(())
    }
}

pub struct SideData {
    pub argv: Vec<String>,
    pub envp: Vec<String>,
}

/// TODO-seed: Not really a seed
type Seed = u64;

pub enum InitUnpredictables {
    Fixed(Unpredictables),
    // TODO-seed: check out the `rand` crate and make this a `dyn Rand`?
    Random(Seed),
}

pub struct InitOpts {
    pub side_data: SideData,
    pub init_unp: InitUnpredictables,
}

pub struct Unpredictables {
    /// Ref vdso(7) (`man vdso`). Pointer to virtual ELF dynamic shared object (vDSO).
    vdso_ptr: u64,
    /// TODO-correctness: still haven't figured out how to get the exact stack_top.
    stack_top: u64,
    /// Linux generates `argv0_to_platform_offset` via `get_random_u32_below(8192)`
    /// in `arch_align_stack` (arch/x86/kernel/process.c), called from
    /// `p = arch_align_stack(p);` in `create_elf_tables` of `fs/binfmt_elf.c`.
    /// We can compute it from user space with
    /// `argv0_to_platform_offset = argv[0] - platform_ptr - strlen(platform_ptr) - 1`,
    /// where platform_ptr points to the start of the `"x86_64"` and is the
    /// a_type=15 (AT_PLATFORM) entry in the auxv.
    /// Or, randomly generate it by generating a random u32 below 8192.
    argv0_to_platform_offset: u64,
    /// Great, every process is seeded with a random 16 bytes.
    random_16_bytes: [u8; 16],
}

/// If `unp` is None, they are randomly generated.
/// Returns the stack pointer which will be the initial %rsp.
pub(crate) fn init_mem(mem: &mut Memory, elf: &SimpleElfFile, init_opts: InitOpts) -> RResult<u64> {
    init_program_segments(mem, elf);
    let sp = init_extra_mem(
        mem,
        elf.e_entry,
        init_opts.side_data,
        finalize_unp(init_opts.init_unp),
    )?;
    Ok(sp)
}

pub(crate) fn init_program_segments(mem: &mut Memory, elf: &SimpleElfFile) {
    mem.insert_segments(&elf.segments);
}

fn finalize_unp(init_unp: InitUnpredictables) -> Unpredictables {
    match init_unp {
        InitUnpredictables::Fixed(unp) => unp,
        InitUnpredictables::Random(seed) => randomize_unpredictables(seed),
    }
}

/// TODO-seed: most terrible prng.
fn silly_prng_byte(seed: Seed, i: u64) -> u8 {
    (((i.wrapping_mul(0x12345678abcdef0)) ^ seed).wrapping_mul(0x1a2b3c4d5e6f708) >> 16) as u8
}

/// TODO-seed: most terrible prng.
fn silly_prng_u32(seed: Seed, i: u64) -> u32 {
    (((i.wrapping_mul(0x1a2b3c4d5e6f708)) ^ seed).wrapping_mul(0x12345678abcdef0) >> 8) as u32
}

/// TODO-correctness: this is nowhere close to what is actually going on.
fn randomize_unpredictables(seed: Seed) -> Unpredictables {
    let vdso_ptr = STACK_TOP - ((silly_prng_u32(seed, 123) & 0x7FF) as u64) * PAGE_SIZE;
    let stack_top =
        vdso_ptr - 0x1000 * PAGE_SIZE - ((silly_prng_u32(seed, 567) & 0x7FF) as u64) * PAGE_SIZE;
    let argv0_to_platform_offset = (silly_prng_u32(seed, 234) & 0x1FFF) as u64;
    Unpredictables {
        vdso_ptr,
        stack_top,
        argv0_to_platform_offset,
        random_16_bytes: [
            silly_prng_byte(seed, 1001),
            silly_prng_byte(seed, 1002),
            silly_prng_byte(seed, 1013),
            silly_prng_byte(seed, 1034),
            silly_prng_byte(seed, 1085),
            silly_prng_byte(seed, 1116),
            silly_prng_byte(seed, 1237),
            silly_prng_byte(seed, 1478),
            silly_prng_byte(seed, 1301),
            silly_prng_byte(seed, 1202),
            silly_prng_byte(seed, 1113),
            silly_prng_byte(seed, 1534),
            silly_prng_byte(seed, 1485),
            silly_prng_byte(seed, 1716),
            silly_prng_byte(seed, 1537),
            silly_prng_byte(seed, 1978),
        ],
    }
}

/// Load vDSO and the initial stack (arguments, environment variables, etc.)
/// Returns the stack pointer which will be the initial %rsp.
fn init_extra_mem(
    mem: &mut Memory,
    entry_point: u64,
    side_data: SideData,
    unp: Unpredictables,
) -> RResult<u64> {
    // Linux: vDSO is mapped in `map_vdso` in `arch/x86/entry/vdso/vma.c`,
    // called from `arch_setup_additional_pages` macro'd as `ARCH_SETUP_ADDITIONAL_PAGES`,
    // called in `load_elf_binary` immediately before `create_elf_tables`.
    let vdso_vma = LoadSegment {
        flags: PermissionFlags {
            executable: true,
            writeable: false,
            readable: true,
        },
        p_vaddr: unp.vdso_ptr,
        segment_data: &VDSO_PAGE,
        memsz: VDSO_PAGE.len() as u64,
    };
    let stack_vma = LoadSegment {
        flags: PermissionFlags {
            executable: false,
            writeable: true,
            readable: true,
        },
        p_vaddr: unp.stack_top - STACK_LIMIT,
        segment_data: &[],
        memsz: STACK_LIMIT,
    };
    mem.insert_segments(&[vdso_vma, stack_vma]);
    let mut ms = MemWithStackPtrDown {
        mem,
        p: unp.stack_top,
    };

    // Write arguments, following Linux: `do_execveat_common` in `fs/exec.c`
    // For some reason there's some extra padding.
    ms.write_bytes(&[0; 8])?;
    let execfn_ptr = ms.write_bytes(FILENAME)?;
    let u_envp = ms.write_strs(&side_data.envp)?;
    let envc = u_envp.len() as u64;

    let final_argv: Vec<String> = if side_data.argv.is_empty() {
        // When argv is empty, add an empty string ("") as argv[0].
        // See Kernel: `do_execveat_common` and `bprm_stack_limits` in `fs/exec.c`
        vec![String::new()]
    } else {
        side_data.argv
    };
    let u_argv = ms.write_strs(&final_argv)?;
    let argc = u_argv.len() as u64;

    // Write platform string ("x86_64") and 16 random bytes,
    // following Linux: `p = arch_align_stack(p);` in `create_elf_tables` of `fs/binfmt_elf.c`
    // This includes ASLR, so it's not always immediately before the arg vector.
    let k_platform = "x86_64\0".as_bytes();
    let aligned_p = (ms.p - unp.argv0_to_platform_offset) & !0xF;
    let mut ms = MemWithStackPtrDown {
        mem: ms.mem,
        p: aligned_p,
    };
    let platform_ptr = ms.write_bytes(k_platform)?;
    let random_ptr = ms.write_bytes(&unp.random_16_bytes)?;

    // Note, since `k_platform` has length 7, we're misaligned by 1 byte here.
    ms.write_bytes(&[0; 1])?;

    // Insert auxv following Linux: `create_elf_tables` in `fs/binfmt_elf.c`.
    // `create_elf_tables` goes out of order and does auxv at the end, which
    // is kinda silly. But this means the STACK_ROUND is after inserting argv.
    // Linux calls `auxv` as `elf_info`.
    let auxv = get_auxv(AuxvPointers {
        entry_point,
        random_ptr,
        platform_ptr,
        execfn_ptr,
        vdso_ptr: unp.vdso_ptr,
    });
    let auxc = auxv.len() as u64;

    // Plan out space on stack
    let mut sp = ms.p;
    // 16 bytes for each auxv entry,
    // plus 16 bytes for the AT_NULL.
    sp -= 16 * (auxc + 1);
    // 8 bytes for a pointer to each argv entry,
    // plus 8 bytes for trailing null pointer.
    // Same for argv entries.
    // Another +8 for the argc.
    // just following `items = (argc + 1) + (envc + 1) + 1;`.
    sp -= 8 * ((argc + 1) + (envc + 1) + 1);
    sp &= !0xF;

    // Write argv, envp, and auxv.
    let mut ms = MemWithStackPtrUp { mem: ms.mem, p: sp };

    ms.write_u64(argc)?;
    for arg in u_argv {
        ms.write_u64(arg)?;
    }
    ms.write_u64(0)?;
    for env in u_envp {
        ms.write_u64(env)?;
    }
    ms.write_u64(0)?;

    for AuxEntry { a_type, a_un } in auxv {
        ms.write_u64(a_type)?;
        ms.write_u64(a_un)?;
    }
    // AT_NULL: a null auxiliary vector (auxv) entry.
    ms.write_u64(0)?;
    ms.write_u64(0)?;

    Ok(sp)
}

struct AuxvPointers {
    entry_point: u64,
    random_ptr: u64,
    platform_ptr: u64,
    execfn_ptr: u64,
    vdso_ptr: u64,
}

fn get_auxv(ptrs: AuxvPointers) -> Vec<AuxEntry> {
    // This was obtained by just dumping the output, see `integration/sources/015_dump.s`.
    // Linux: ref the `NEW_AUX_ENT()` macro calls in `create_elf_tables` in `fs/binfmt_elf`.
    // Note the first two entries are defined in `ARCH_DLINFO` from
    // .
    // These extend the `saved_auxv` which can be manipulated from userspace by `prctl`,
    // but the code.golf environment leaves it empty initially.
    vec![
        // ARCH_DLINFO from `arch/x86/include/asm/elf.h` adds the
        // AT_SYSINFO_EHDR and AT_MINSIGSTKSZ entries.
        // current->mm->context.vdso
        aux_entry(at::AT_SYSINFO_EHDR, ptrs.vdso_ptr),
        aux_entry(at::AT_MINSIGSTKSZ, 0xD30),
        aux_entry(at::AT_HWCAP, 0x178BFBFF),
        aux_entry(at::AT_PAGESZ, 0x1000),
        aux_entry(at::AT_CLKTCK, 0x64),
        aux_entry(at::AT_PHDR, 0x0),
        aux_entry(at::AT_PHENT, 0x38),
        aux_entry(at::AT_PHNUM, 0x3),
        aux_entry(at::AT_BASE, 0x0),
        aux_entry(at::AT_FLAGS, 0x0),
        aux_entry(at::AT_ENTRY, ptrs.entry_point),
        aux_entry(at::AT_UID, 0xFFFE),
        aux_entry(at::AT_EUID, 0xFFFE),
        aux_entry(at::AT_GID, 0xFFFE),
        aux_entry(at::AT_EGID, 0xFFFE),
        aux_entry(at::AT_SECURE, 0x0),
        aux_entry(at::AT_RANDOM, ptrs.random_ptr),
        aux_entry(at::AT_HWCAP2, 0x2),
        aux_entry(at::AT_EXECFN, ptrs.execfn_ptr),
        aux_entry(at::AT_PLATFORM, ptrs.platform_ptr),
    ]
}

// TODO: cleanup comment
// `create_elf_tables` in `fs/binfmt_elf.c` inserts the platform string `"x86_64"` and the 16 random bytes.
// `create_elf_tables` does `p = arch_align_stack(p);`
// - `arch/x86/kernel/process.c`: `arch_align_stack` does `sp -= get_random_u32_below(8192); return sp & ~0xf;` when ASLR is enabled.
// `setup_arg_pages` in `fs/exec.c` already has a VMA (Virtual memory area) and uses `relocate_vma_down` to shift it down by `stack_shift`
// `load_elf_binary` in `fs/binfmt_elf.c` calls `setup_arg_pages`, and randomizes stack top.
// `load_elf_binary` gets set as a function pointer as `load_binary` in `linux_binfmt elf_format`
// `search_binary_handler` calls `load_binary` hence `load_elf_binary`.
// `exec_binprm` calls `search_binary_handler`
// `bprm_execve` calls `exec_binprm` --- this is what inserts the args.

/// Described in System V ABI as auxv_t
struct AuxEntry {
    a_type: u64,
    a_un: u64,
}
fn aux_entry(a_type: u64, a_un: u64) -> AuxEntry {
    AuxEntry { a_type, a_un }
}

/// From `include/uapi/linux/auxvec.h`
mod at {
    /// end of vector
    #[allow(unused)]
    pub const AT_NULL: u64 = 0;
    /// entry should be ignored
    #[allow(unused)]
    pub const AT_IGNORE: u64 = 1;
    /// file descriptor of program
    #[allow(unused)]
    pub const AT_EXECFD: u64 = 2;
    /// program headers for program
    pub const AT_PHDR: u64 = 3;
    /// size of program header entry
    pub const AT_PHENT: u64 = 4;
    /// number of program headers
    pub const AT_PHNUM: u64 = 5;
    /// system page size
    pub const AT_PAGESZ: u64 = 6;
    /// base address of interpreter
    pub const AT_BASE: u64 = 7;
    /// flags
    pub const AT_FLAGS: u64 = 8;
    /// entry point of program
    pub const AT_ENTRY: u64 = 9;
    /// program is not ELF
    #[allow(unused)]
    pub const AT_NOTELF: u64 = 10;
    /// real uid
    pub const AT_UID: u64 = 11;
    /// effective uid
    pub const AT_EUID: u64 = 12;
    /// real gid
    pub const AT_GID: u64 = 13;
    /// effective gid
    pub const AT_EGID: u64 = 14;
    /// string identifying CPU for optimizations
    pub const AT_PLATFORM: u64 = 15;
    /// arch dependent hints at CPU capabilities
    pub const AT_HWCAP: u64 = 16;
    /// frequency at which times() increments
    pub const AT_CLKTCK: u64 = 17;
    /// secure mode boolean
    pub const AT_SECURE: u64 = 23;
    /// string identifying real platform, m
    #[allow(unused)]
    pub const AT_BASE_PLATFORM: u64 = 24;
    /// address of 16 random bytes
    pub const AT_RANDOM: u64 = 25;
    /// extension of AT_HWCAP
    pub const AT_HWCAP2: u64 = 26;
    /// rseq supported feature size
    #[allow(unused)]
    pub const AT_RSEQ_FEATURE_SIZE: u64 = 27;
    /// rseq allocation alignment
    #[allow(unused)]
    pub const AT_RSEQ_ALIGN: u64 = 28;
    /// extension of AT_HWCAP
    #[allow(unused)]
    pub const AT_HWCAP3: u64 = 29;
    /// extension of AT_HWCAP
    #[allow(unused)]
    pub const AT_HWCAP4: u64 = 30;
    /// filename of program
    pub const AT_EXECFN: u64 = 31;
    /// minimal stack size for signal delivery
    pub const AT_MINSIGSTKSZ: u64 = 51;
    /// From `arch/x86/include/uapi/asm/auxvec.h`
    pub const AT_SYSINFO_EHDR: u64 = 33;
}

const VDSO_PAGE: [u8; 0x1000] = [
    0x7F, 0x45, 0x4C, 0x46, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x3E, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x38, 0x00, 0x04, 0x00, 0x40, 0x00, 0x10, 0x00, 0x0F, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x5D, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5D, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
    0xE0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xE0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0xE5, 0x74, 0x64, 0x04, 0x00, 0x00, 0x00,
    0x60, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x60, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
    0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0xC1, 0x24, 0xB0, 0x11, 0x41, 0x00, 0x02, 0x00,
    0x00, 0x04, 0x08, 0x45, 0x02, 0x24, 0x01, 0x80, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x0A, 0x00, 0x00, 0x00, 0x7E, 0x55, 0xDD, 0x71, 0x00, 0xCA, 0x1B, 0xB0, 0xDA, 0x10, 0x9A, 0x9E,
    0x52, 0x8F, 0x30, 0x68, 0x86, 0x4B, 0x85, 0xE6, 0x0D, 0x8E, 0x1E, 0x82, 0x4A, 0xCC, 0x08, 0x6C,
    0x94, 0x78, 0x9E, 0x7C, 0x19, 0xA3, 0x43, 0x6E, 0x8A, 0x2A, 0xC6, 0x26, 0x26, 0xB0, 0x62, 0x65,
    0x6D, 0x58, 0x87, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x28, 0x00, 0x00, 0x00, 0x22, 0x00, 0x0B, 0x00, 0x60, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x60, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x12, 0x00, 0x0B, 0x00,
    0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAC, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x3D, 0x00, 0x00, 0x00, 0x22, 0x00, 0x0B, 0x00, 0xC0, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x5F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x12, 0x00, 0x0B, 0x00,
    0xC0, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x22, 0x00, 0x0B, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xAC, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x0B, 0x00,
    0x30, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x58, 0x00, 0x00, 0x00, 0x12, 0x00, 0x0B, 0x00, 0x50, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x9D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x22, 0x00, 0x0B, 0x00,
    0x30, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x0B, 0x00, 0x60, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x60, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x11, 0x00, 0xF1, 0xFF,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x4A, 0x00, 0x00, 0x00, 0x12, 0x00, 0x0B, 0x00, 0x20, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x22, 0x00, 0x0B, 0x00,
    0x20, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x5F, 0x5F, 0x76, 0x64, 0x73, 0x6F, 0x5F, 0x67, 0x65, 0x74, 0x74, 0x69, 0x6D, 0x65, 0x6F,
    0x66, 0x64, 0x61, 0x79, 0x00, 0x5F, 0x5F, 0x76, 0x64, 0x73, 0x6F, 0x5F, 0x74, 0x69, 0x6D, 0x65,
    0x00, 0x5F, 0x5F, 0x76, 0x64, 0x73, 0x6F, 0x5F, 0x63, 0x6C, 0x6F, 0x63, 0x6B, 0x5F, 0x67, 0x65,
    0x74, 0x74, 0x69, 0x6D, 0x65, 0x00, 0x5F, 0x5F, 0x76, 0x64, 0x73, 0x6F, 0x5F, 0x63, 0x6C, 0x6F,
    0x63, 0x6B, 0x5F, 0x67, 0x65, 0x74, 0x72, 0x65, 0x73, 0x00, 0x5F, 0x5F, 0x76, 0x64, 0x73, 0x6F,
    0x5F, 0x67, 0x65, 0x74, 0x63, 0x70, 0x75, 0x00, 0x5F, 0x5F, 0x76, 0x64, 0x73, 0x6F, 0x5F, 0x73,
    0x67, 0x78, 0x5F, 0x65, 0x6E, 0x74, 0x65, 0x72, 0x5F, 0x65, 0x6E, 0x63, 0x6C, 0x61, 0x76, 0x65,
    0x00, 0x6C, 0x69, 0x6E, 0x75, 0x78, 0x2D, 0x76, 0x64, 0x73, 0x6F, 0x2E, 0x73, 0x6F, 0x2E, 0x31,
    0x00, 0x4C, 0x49, 0x4E, 0x55, 0x58, 0x5F, 0x32, 0x2E, 0x36, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
    0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00,
    0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
    0xA1, 0xBF, 0xEE, 0x0D, 0x14, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0xF6, 0x75, 0xAE, 0x03,
    0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xF5, 0xFE, 0xFF, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xFC, 0xFF, 0xFF, 0x6F, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xFD, 0xFF, 0xFF, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xF0, 0xFF, 0xFF, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x8C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x69, 0x6E, 0x75,
    0x78, 0x00, 0x00, 0x00, 0x77, 0x01, 0x06, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x4C, 0x69, 0x6E, 0x75, 0x78, 0x00, 0x00, 0x00, 0x36, 0x2E, 0x31, 0x2E,
    0x30, 0x2D, 0x32, 0x38, 0x2D, 0x61, 0x6D, 0x64, 0x36, 0x34, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
    0x14, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x47, 0x4E, 0x55, 0x00, 0xAD, 0xBB, 0xC6, 0x57,
    0x92, 0x90, 0x80, 0x6C, 0x03, 0x6A, 0x14, 0xC1, 0x9E, 0xA7, 0x87, 0x0A, 0x2B, 0x68, 0x2D, 0xD5,
    0x01, 0x1B, 0x03, 0x3B, 0x44, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x50, 0x01, 0x00, 0x00,
    0x60, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0xD0, 0x03, 0x00, 0x00,
    0xA0, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0xB4, 0x00, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00,
    0xF4, 0x00, 0x00, 0x00, 0xC0, 0x06, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0xF0, 0x06, 0x00, 0x00,
    0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x7A, 0x52, 0x00, 0x01, 0x78, 0x10, 0x01, 0x1B, 0x0C, 0x07, 0x08, 0x90, 0x01, 0x00, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0xE8, 0x00, 0x00, 0x00, 0xCE, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0xA4, 0x01, 0x00, 0x00,
    0xAC, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0E, 0x10, 0x86, 0x02, 0x49, 0x0D, 0x06, 0x42, 0x8C, 0x03,
    0x48, 0x83, 0x04, 0x02, 0xA4, 0x0A, 0xC3, 0x42, 0xCC, 0x41, 0xC6, 0x0C, 0x07, 0x08, 0x42, 0x0B,
    0x10, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x00, 0x00, 0x28, 0x03, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x44, 0x03, 0x00, 0x00,
    0x60, 0x02, 0x00, 0x00, 0x00, 0x41, 0x0E, 0x10, 0x86, 0x02, 0x43, 0x0D, 0x06, 0x44, 0x8D, 0x03,
    0x8C, 0x04, 0x44, 0x83, 0x05, 0x02, 0xA8, 0x0A, 0xC3, 0x44, 0xCC, 0x42, 0xCD, 0x41, 0xC6, 0x0C,
    0x07, 0x08, 0x42, 0x0B, 0x4D, 0x0A, 0xC3, 0x42, 0xCC, 0x42, 0xCD, 0x41, 0xC6, 0x0C, 0x07, 0x08,
    0x42, 0x0B, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x64, 0x05, 0x00, 0x00,
    0x5F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xC4, 0x00, 0x00, 0x00,
    0xB0, 0x05, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x24, 0x00, 0x00, 0x00, 0xDC, 0x00, 0x00, 0x00, 0xC8, 0x05, 0x00, 0x00, 0x9D, 0x00, 0x00, 0x00,
    0x00, 0x41, 0x0E, 0x10, 0x86, 0x02, 0x43, 0x0D, 0x06, 0x41, 0x83, 0x03, 0x02, 0x4E, 0x0C, 0x07,
    0x08, 0x42, 0x0C, 0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x83, 0xFF, 0x01, 0x75, 0x0E, 0x0F, 0x01, 0xF9, 0x66, 0x90, 0x48, 0xC1, 0xE2, 0x20, 0x48, 0x09,
    0xD0, 0xC3, 0xCC, 0x83, 0xFF, 0x02, 0x74, 0x49, 0x83, 0xFF, 0x03, 0x74, 0x09, 0x48, 0xC7, 0xC0,
    0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0xCC, 0x4C, 0x8D, 0x05, 0x23, 0xD9, 0xFF, 0xFF, 0x41, 0x8B, 0x38,
    0x85, 0xFF, 0x74, 0xE9, 0x4C, 0x8B, 0x0D, 0x1D, 0xD9, 0xFF, 0xFF, 0x48, 0x8B, 0x35, 0x1E, 0xD9,
    0xFF, 0xFF, 0x0F, 0x01, 0xF9, 0x66, 0x90, 0x41, 0x8B, 0x08, 0x39, 0xCF, 0x75, 0xDF, 0x48, 0xC1,
    0xE2, 0x20, 0x48, 0x09, 0xC2, 0x48, 0x89, 0xD0, 0x49, 0xF7, 0xE1, 0x48, 0x8D, 0x04, 0x16, 0xC3,
    0xCC, 0x8B, 0x15, 0xE9, 0xC8, 0xFF, 0xFF, 0x48, 0x8D, 0x3D, 0xE2, 0xC8, 0xFF, 0xFF, 0x89, 0xD6,
    0x83, 0xE6, 0xFE, 0xF6, 0x05, 0xF3, 0xC8, 0xFF, 0xFF, 0x01, 0x74, 0xA1, 0x0F, 0x01, 0xF9, 0x66,
    0x90, 0x48, 0xC1, 0xE2, 0x20, 0x48, 0x09, 0xC2, 0x48, 0x89, 0xD0, 0x0F, 0xBE, 0x15, 0xDA, 0xC8,
    0xFF, 0xFF, 0x48, 0x2B, 0x05, 0xBF, 0xC8, 0xFF, 0xFF, 0x49, 0x89, 0xC0, 0x89, 0xD1, 0xF7, 0xD9,
    0x49, 0xD3, 0xE8, 0x89, 0xD1, 0x48, 0xD3, 0xE0, 0x85, 0xD2, 0x48, 0x8B, 0x0D, 0xAF, 0xC8, 0xFF,
    0xFF, 0x8B, 0x15, 0xB1, 0xC8, 0xFF, 0xFF, 0x49, 0x0F, 0x48, 0xC0, 0x48, 0xF7, 0xE2, 0x48, 0x0F,
    0xAC, 0xD0, 0x20, 0x8B, 0x17, 0x39, 0xD6, 0x75, 0xA5, 0x48, 0x01, 0xC8, 0xC3, 0xCC, 0x66, 0x90,
    0x55, 0x49, 0x89, 0xFA, 0x49, 0x89, 0xF3, 0x48, 0x89, 0xE5, 0x41, 0x54, 0x4C, 0x8D, 0x25, 0xED,
    0xB8, 0xFF, 0xFF, 0x53, 0x48, 0x85, 0xFF, 0x0F, 0x84, 0x93, 0x00, 0x00, 0x00, 0x41, 0x8B, 0x1C,
    0x24, 0xF6, 0xC3, 0x01, 0x0F, 0x85, 0xC4, 0x00, 0x00, 0x00, 0x8B, 0x3D, 0xD4, 0xB8, 0xFF, 0xFF,
    0xE8, 0xFB, 0xFE, 0xFF, 0xFF, 0x48, 0x89, 0xC2, 0x48, 0x85, 0xC0, 0x0F, 0x88, 0xC0, 0x00, 0x00,
    0x00, 0x48, 0x8B, 0x0D, 0xC0, 0xB8, 0xFF, 0xFF, 0x48, 0x8B, 0x05, 0xD9, 0xB8, 0xFF, 0xFF, 0x8B,
    0x35, 0xC3, 0xB8, 0xFF, 0xFF, 0x48, 0x39, 0xD1, 0x73, 0x0A, 0x48, 0x29, 0xCA, 0x48, 0x0F, 0xAF,
    0xD6, 0x48, 0x01, 0xD0, 0x8B, 0x0D, 0xB2, 0xB8, 0xFF, 0xFF, 0x48, 0x8B, 0x35, 0xAF, 0xB8, 0xFF,
    0xFF, 0x41, 0x8B, 0x14, 0x24, 0x39, 0xD3, 0x75, 0xA4, 0x48, 0xD3, 0xE8, 0x48, 0x3D, 0xFF, 0xC9,
    0x9A, 0x3B, 0x76, 0x16, 0x31, 0xD2, 0x48, 0x2D, 0x00, 0xCA, 0x9A, 0x3B, 0x83, 0xC2, 0x01, 0x48,
    0x3D, 0xFF, 0xC9, 0x9A, 0x3B, 0x77, 0xEF, 0x48, 0x01, 0xD6, 0x89, 0xC0, 0x49, 0x89, 0x32, 0x48,
    0x69, 0xC0, 0xD3, 0x4D, 0x62, 0x10, 0x48, 0xC1, 0xE8, 0x26, 0x89, 0xC0, 0x49, 0x89, 0x42, 0x08,
    0x4D, 0x85, 0xDB, 0x75, 0x08, 0x31, 0xC0, 0x5B, 0x41, 0x5C, 0x5D, 0xC3, 0xCC, 0x48, 0x8D, 0x15,
    0x3C, 0xB8, 0xFF, 0xFF, 0x48, 0x8D, 0x05, 0x35, 0xE8, 0xFF, 0xFF, 0x81, 0x3D, 0x2F, 0xB8, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x0F, 0x45, 0xC2, 0x8B, 0x90, 0xE0, 0x00, 0x00, 0x00, 0x41,
    0x89, 0x13, 0x8B, 0x80, 0xE4, 0x00, 0x00, 0x00, 0x41, 0x89, 0x43, 0x04, 0xEB, 0xC7, 0x81, 0x3D,
    0x0C, 0xB8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x74, 0x16, 0xF3, 0x90, 0xE9, 0x1C, 0xFF, 0xFF,
    0xFF, 0xB8, 0x60, 0x00, 0x00, 0x00, 0x4C, 0x89, 0xD7, 0x4C, 0x89, 0xDE, 0x0F, 0x05, 0xEB, 0xA7,
    0x4C, 0x8D, 0x25, 0xE9, 0xE7, 0xFF, 0xFF, 0x41, 0x8B, 0x1C, 0x24, 0xF6, 0xC3, 0x01, 0x0F, 0x85,
    0x81, 0x00, 0x00, 0x00, 0x8B, 0x3D, 0xDA, 0xE7, 0xFF, 0xFF, 0xE8, 0x01, 0xFE, 0xFF, 0xFF, 0x48,
    0x89, 0xC2, 0x48, 0x85, 0xC0, 0x78, 0xCA, 0x48, 0x8B, 0x35, 0xCA, 0xE7, 0xFF, 0xFF, 0x48, 0x8B,
    0x05, 0xE3, 0xE7, 0xFF, 0xFF, 0x8B, 0x0D, 0xCD, 0xE7, 0xFF, 0xFF, 0x48, 0x39, 0xD6, 0x73, 0x0A,
    0x48, 0x29, 0xF2, 0x48, 0x0F, 0xAF, 0xD1, 0x48, 0x01, 0xD0, 0x8B, 0x0D, 0xBC, 0xE7, 0xFF, 0xFF,
    0x48, 0x8B, 0x3D, 0xB9, 0xE7, 0xFF, 0xFF, 0x41, 0x8B, 0x14, 0x24, 0x39, 0xDA, 0x75, 0xA8, 0x48,
    0xD3, 0xE8, 0x48, 0x03, 0x05, 0xAF, 0xB7, 0xFF, 0xFF, 0x48, 0x03, 0x3D, 0xA0, 0xB7, 0xFF, 0xFF,
    0x31, 0xD2, 0x48, 0x3D, 0xFF, 0xC9, 0x9A, 0x3B, 0x76, 0x11, 0x48, 0x2D, 0x00, 0xCA, 0x9A, 0x3B,
    0x83, 0xC2, 0x01, 0x48, 0x3D, 0xFF, 0xC9, 0x9A, 0x3B, 0x77, 0xEF, 0x89, 0xD6, 0x48, 0x01, 0xFE,
    0xE9, 0xF5, 0xFE, 0xFF, 0xFF, 0xF3, 0x90, 0xE9, 0x6B, 0xFF, 0xFF, 0xFF, 0x0F, 0x1F, 0x40, 0x00,
    0x48, 0x8D, 0x05, 0x49, 0xE7, 0xFF, 0xFF, 0x48, 0x8D, 0x15, 0x42, 0xB7, 0xFF, 0xFF, 0x81, 0x3D,
    0x3C, 0xB7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x0F, 0x45, 0xC2, 0x48, 0x8B, 0x40, 0x20,
    0x48, 0x85, 0xFF, 0x74, 0x03, 0x48, 0x89, 0x07, 0xC3, 0xCC, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00,
    0x55, 0x48, 0x89, 0xE5, 0x41, 0x55, 0x41, 0x54, 0x49, 0x89, 0xF4, 0x53, 0x48, 0x63, 0xDF, 0x83,
    0xFB, 0x0F, 0x0F, 0x87, 0xA5, 0x00, 0x00, 0x00, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x89, 0xD9, 0x4C,
    0x8D, 0x15, 0xFA, 0xB6, 0xFF, 0xFF, 0xD3, 0xE0, 0x89, 0xC2, 0x81, 0xE2, 0x83, 0x08, 0x00, 0x00,
    0x0F, 0x84, 0xAC, 0x00, 0x00, 0x00, 0x45, 0x8B, 0x1A, 0x41, 0xF6, 0xC3, 0x01, 0x0F, 0x85, 0x8E,
    0x00, 0x00, 0x00, 0x41, 0x8B, 0x7A, 0x04, 0xE8, 0x04, 0xFD, 0xFF, 0xFF, 0x48, 0x89, 0xC2, 0x48,
    0x85, 0xC0, 0x78, 0x69, 0x48, 0x63, 0xF3, 0x49, 0x8B, 0x4A, 0x08, 0x41, 0x8B, 0x7A, 0x18, 0x48,
    0xC1, 0xE6, 0x04, 0x4C, 0x01, 0xD6, 0x48, 0x8B, 0x46, 0x28, 0x48, 0x39, 0xD1, 0x73, 0x0A, 0x48,
    0x29, 0xCA, 0x48, 0x0F, 0xAF, 0xD7, 0x48, 0x01, 0xD0, 0x41, 0x8B, 0x4A, 0x1C, 0x48, 0x8B, 0x76,
    0x20, 0x41, 0x8B, 0x12, 0x41, 0x39, 0xD3, 0x75, 0xAD, 0x48, 0xD3, 0xE8, 0x48, 0x3D, 0xFF, 0xC9,
    0x9A, 0x3B, 0x76, 0x16, 0x31, 0xD2, 0x48, 0x2D, 0x00, 0xCA, 0x9A, 0x3B, 0x83, 0xC2, 0x01, 0x48,
    0x3D, 0xFF, 0xC9, 0x9A, 0x3B, 0x77, 0xEF, 0x48, 0x01, 0xD6, 0x49, 0x89, 0x34, 0x24, 0x49, 0x89,
    0x44, 0x24, 0x08, 0x5B, 0x31, 0xC0, 0x41, 0x5C, 0x41, 0x5D, 0x5D, 0xC3, 0xCC, 0x89, 0xDF, 0x4C,
    0x89, 0xE6, 0xB8, 0xE4, 0x00, 0x00, 0x00, 0x0F, 0x05, 0x5B, 0x41, 0x5C, 0x41, 0x5D, 0x5D, 0xC3,
    0xCC, 0x41, 0x81, 0x7A, 0x04, 0xFF, 0xFF, 0xFF, 0x7F, 0x74, 0x5C, 0xF3, 0x90, 0xE9, 0x54, 0xFF,
    0xFF, 0xFF, 0xA8, 0x60, 0x75, 0x11, 0x83, 0xFB, 0x04, 0x75, 0xD2, 0x4C, 0x8D, 0x15, 0x1E, 0xB7,
    0xFF, 0xFF, 0xE9, 0x3F, 0xFF, 0xFF, 0xFF, 0x48, 0x8D, 0x43, 0x02, 0x48, 0xC1, 0xE0, 0x04, 0x4C,
    0x01, 0xD0, 0x41, 0x8B, 0x0A, 0xF6, 0xC1, 0x01, 0x75, 0x19, 0x48, 0x8B, 0x30, 0x49, 0x89, 0x34,
    0x24, 0x48, 0x8B, 0x70, 0x08, 0x49, 0x89, 0x74, 0x24, 0x08, 0x41, 0x8B, 0x32, 0x39, 0xF1, 0x74,
    0x92, 0xEB, 0xDF, 0x81, 0x3D, 0xF7, 0xB5, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x0F, 0x84, 0xB2,
    0x00, 0x00, 0x00, 0xF3, 0x90, 0xEB, 0xCB, 0x4C, 0x8D, 0x1D, 0xE2, 0xE5, 0xFF, 0xFF, 0x83, 0xFB,
    0x04, 0x49, 0x8D, 0x83, 0xF0, 0x00, 0x00, 0x00, 0x4C, 0x0F, 0x44, 0xD8, 0x45, 0x8B, 0x2B, 0x41,
    0xF6, 0xC5, 0x01, 0x0F, 0x85, 0xF5, 0x00, 0x00, 0x00, 0x41, 0x8B, 0x7B, 0x04, 0xE8, 0xEE, 0xFB,
    0xFF, 0xFF, 0x48, 0x89, 0xC2, 0x48, 0x85, 0xC0, 0x0F, 0x88, 0x4F, 0xFF, 0xFF, 0xFF, 0x48, 0x63,
    0xF3, 0x4D, 0x8B, 0x43, 0x08, 0x41, 0x8B, 0x4B, 0x18, 0x48, 0xC1, 0xE6, 0x04, 0x49, 0x8D, 0x3C,
    0x33, 0x48, 0x8B, 0x47, 0x28, 0x49, 0x39, 0xD0, 0x73, 0x0A, 0x4C, 0x29, 0xC2, 0x48, 0x0F, 0xAF,
    0xD1, 0x48, 0x01, 0xD0, 0x41, 0x8B, 0x4B, 0x1C, 0x48, 0x8B, 0x57, 0x20, 0x41, 0x8B, 0x3B, 0x41,
    0x39, 0xFD, 0x75, 0xA8, 0x49, 0x01, 0xF2, 0x48, 0xD3, 0xE8, 0x49, 0x8B, 0x72, 0x20, 0x49, 0x03,
    0x42, 0x28, 0x48, 0x01, 0xD6, 0x48, 0x3D, 0xFF, 0xC9, 0x9A, 0x3B, 0x0F, 0x86, 0x98, 0x00, 0x00,
    0x00, 0x31, 0xD2, 0x48, 0x2D, 0x00, 0xCA, 0x9A, 0x3B, 0x83, 0xC2, 0x01, 0x48, 0x3D, 0xFF, 0xC9,
    0x9A, 0x3B, 0x77, 0xEF, 0x48, 0x01, 0xF2, 0x49, 0x89, 0x44, 0x24, 0x08, 0x49, 0x89, 0x14, 0x24,
    0xE9, 0xCE, 0xFE, 0xFF, 0xFF, 0x48, 0x83, 0xC3, 0x02, 0x48, 0x8D, 0x35, 0x30, 0xE5, 0xFF, 0xFF,
    0x48, 0x89, 0xD8, 0x48, 0xC1, 0xE0, 0x04, 0x4C, 0x8D, 0x0C, 0x06, 0x8B, 0x3E, 0x40, 0xF6, 0xC7,
    0x01, 0x75, 0x52, 0x4D, 0x8B, 0x01, 0x49, 0x8B, 0x49, 0x08, 0x44, 0x8B, 0x1E, 0x41, 0x39, 0xFB,
    0x75, 0xE9, 0x49, 0x01, 0xC2, 0x49, 0x8B, 0x32, 0x49, 0x03, 0x4A, 0x08, 0x4C, 0x01, 0xC6, 0x48,
    0x81, 0xF9, 0xFF, 0xC9, 0x9A, 0x3B, 0x76, 0x13, 0x48, 0x81, 0xE9, 0x00, 0xCA, 0x9A, 0x3B, 0x83,
    0xC2, 0x01, 0x48, 0x81, 0xF9, 0xFF, 0xC9, 0x9A, 0x3B, 0x77, 0xED, 0x89, 0xD0, 0x49, 0x89, 0x4C,
    0x24, 0x08, 0x48, 0x01, 0xF0, 0x49, 0x89, 0x04, 0x24, 0xE9, 0x65, 0xFE, 0xFF, 0xFF, 0xF3, 0x90,
    0xE9, 0xF7, 0xFE, 0xFF, 0xFF, 0xF3, 0x90, 0xEB, 0xA2, 0x31, 0xD2, 0xE9, 0x74, 0xFF, 0xFF, 0xFF,
    0x83, 0xFF, 0x0F, 0x77, 0x51, 0x48, 0x8D, 0x05, 0xB4, 0xE4, 0xFF, 0xFF, 0x48, 0x8D, 0x15, 0xAD,
    0xB4, 0xFF, 0xFF, 0x89, 0xF9, 0x81, 0x3D, 0xA5, 0xB4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x48,
    0x0F, 0x44, 0xD0, 0xB8, 0x01, 0x00, 0x00, 0x00, 0xD3, 0xE0, 0xA9, 0x93, 0x08, 0x00, 0x00, 0x75,
    0x1D, 0xA8, 0x60, 0x74, 0x21, 0xB8, 0x00, 0x09, 0x3D, 0x00, 0x48, 0x85, 0xF6, 0x74, 0x0B, 0x48,
    0xC7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x46, 0x08, 0x31, 0xC0, 0xC3, 0xCC, 0x8B, 0x82,
    0xE8, 0x00, 0x00, 0x00, 0xEB, 0xE4, 0xB8, 0xE5, 0x00, 0x00, 0x00, 0x0F, 0x05, 0xC3, 0xCC, 0x90,
    0xB8, 0x7B, 0x00, 0x00, 0x00, 0xF3, 0x0F, 0xC7, 0xF8, 0x48, 0x85, 0xFF, 0x74, 0x0A, 0x89, 0xC2,
    0x81, 0xE2, 0xFF, 0x0F, 0x00, 0x00, 0x89, 0x17, 0x48, 0x85, 0xF6, 0x74, 0x05, 0xC1, 0xE8, 0x0C,
    0x89, 0x06, 0x31, 0xC0, 0xC3, 0xCC, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
    0x55, 0x48, 0x89, 0xE5, 0x53, 0x89, 0xC8, 0x83, 0xF8, 0x02, 0x72, 0x49, 0x83, 0xF8, 0x03, 0x77,
    0x44, 0x48, 0x8B, 0x4D, 0x10, 0x48, 0xC7, 0xC3, 0x28, 0x00, 0x00, 0x00, 0x48, 0x83, 0x3C, 0x19,
    0x00, 0x75, 0x32, 0x48, 0x83, 0xC3, 0x08, 0x48, 0x81, 0xFB, 0x00, 0x01, 0x00, 0x00, 0x75, 0xEC,
    0x48, 0x8B, 0x19, 0x48, 0x8D, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0xD7, 0x48, 0x8B, 0x5D,
    0x10, 0xC7, 0x43, 0x08, 0x04, 0x00, 0x00, 0x00, 0x48, 0x83, 0x7B, 0x18, 0x00, 0x75, 0x22, 0x31,
    0xC0, 0x5B, 0xC9, 0xC3, 0xCC, 0xB8, 0xEA, 0xFF, 0xFF, 0xFF, 0xEB, 0xF5, 0x48, 0x8B, 0x5D, 0x10,
    0x89, 0x43, 0x08, 0x66, 0x89, 0x7B, 0x0C, 0x66, 0x89, 0x73, 0x0E, 0x48, 0x89, 0x53, 0x10, 0xEB,
    0xD7, 0x48, 0x89, 0xE1, 0x48, 0x89, 0xD8, 0x48, 0x89, 0xE3, 0x48, 0x83, 0xE3, 0x0F, 0x48, 0x83,
    0xE4, 0xF0, 0x50, 0x50, 0xFC, 0x48, 0x8B, 0x40, 0x18, 0x0F, 0xAE, 0xE8, 0xFF, 0xD0, 0x48, 0x8D,
    0x64, 0x1C, 0x10, 0x83, 0xF8, 0x00, 0x7E, 0xB9, 0xE9, 0x6A, 0xFF, 0xFF, 0xFF, 0xC8, 0xF9, 0xFF,
    0xFF, 0x50, 0x00, 0x00, 0x00, 0x72, 0x00, 0x05, 0x05, 0xBC, 0xF9, 0xFF, 0xFF, 0x49, 0x00, 0x00,
    0x00, 0x3B, 0x00, 0x05, 0x03, 0xED, 0xF9, 0xFF, 0xFF, 0x40, 0x00, 0x00, 0x00, 0x72, 0x00, 0x05,
    0x05, 0xE1, 0xF9, 0xFF, 0xFF, 0x39, 0x00, 0x00, 0x00, 0x3B, 0x00, 0x05, 0x03, 0x0F, 0xFA, 0xFF,
    0xFF, 0x30, 0x00, 0x00, 0x00, 0x72, 0x00, 0x05, 0x05, 0x03, 0xFA, 0xFF, 0xFF, 0x29, 0x00, 0x00,
    0x00, 0x3B, 0x00, 0x05, 0x03, 0xF0, 0xFE, 0xFF, 0xFF, 0x20, 0x00, 0x00, 0x00, 0x16, 0x02, 0x04,
    0x04, 0x0F, 0xAE, 0xE8, 0x0F, 0x31, 0x0F, 0x01, 0xF9, 0x0F, 0xAE, 0xE8, 0x0F, 0x31, 0x0F, 0x01,
    0xF9, 0x0F, 0xAE, 0xE8, 0x0F, 0x31, 0x0F, 0x01, 0xF9, 0xF3, 0x0F, 0xC7, 0xF8, 0x47, 0x43, 0x43,
    0x3A, 0x20, 0x28, 0x44, 0x65, 0x62, 0x69, 0x61, 0x6E, 0x20, 0x31, 0x32, 0x2E, 0x32, 0x2E, 0x30,
    0x2D, 0x31, 0x34, 0x29, 0x20, 0x31, 0x32, 0x2E, 0x32, 0x2E, 0x30, 0x00, 0x00, 0x2E, 0x73, 0x68,
    0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00, 0x2E, 0x67, 0x6E, 0x75, 0x2E, 0x68, 0x61, 0x73, 0x68,
    0x00, 0x2E, 0x64, 0x79, 0x6E, 0x73, 0x79, 0x6D, 0x00, 0x2E, 0x64, 0x79, 0x6E, 0x73, 0x74, 0x72,
    0x00, 0x2E, 0x67, 0x6E, 0x75, 0x2E, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x00, 0x2E, 0x67,
    0x6E, 0x75, 0x2E, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x5F, 0x64, 0x00, 0x2E, 0x64, 0x79,
    0x6E, 0x61, 0x6D, 0x69, 0x63, 0x00, 0x2E, 0x6E, 0x6F, 0x74, 0x65, 0x00, 0x2E, 0x65, 0x68, 0x5F,
    0x66, 0x72, 0x61, 0x6D, 0x65, 0x5F, 0x68, 0x64, 0x72, 0x00, 0x2E, 0x65, 0x68, 0x5F, 0x66, 0x72,
    0x61, 0x6D, 0x65, 0x00, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 0x2E, 0x61, 0x6C, 0x74, 0x69, 0x6E,
    0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x00, 0x2E, 0x61, 0x6C, 0x74, 0x69,
    0x6E, 0x73, 0x74, 0x72, 0x5F, 0x72, 0x65, 0x70, 0x6C, 0x61, 0x63, 0x65, 0x6D, 0x65, 0x6E, 0x74,
    0x00, 0x2E, 0x63, 0x6F, 0x6D, 0x6D, 0x65, 0x6E, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0F, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0B, 0x00, 0x00, 0x00, 0xF6, 0xFF, 0xFF, 0x6F, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x68, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x5C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xC8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x38, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x1D, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x8B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x25, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x6F, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x8C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x1A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x32, 0x00, 0x00, 0x00, 0xFD, 0xFF, 0xFF, 0x6F, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xA8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x41, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xE0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
];
